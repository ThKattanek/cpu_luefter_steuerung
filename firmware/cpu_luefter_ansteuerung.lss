
cpu_luefter_ansteuerung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000a4  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000129  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001f8  00000000  00000000  00000151  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000151  00000000  00000000  00000349  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000b7  00000000  00000000  0000049a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000180  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000040  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	0f d0       	rcall	.+30     	; 0x52 <main>
  34:	35 c0       	rjmp	.+106    	; 0xa0 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <InitPWMChannels>:
}

/* ------------------------------------------------------------------------- */
void InitPWMChannels()
{
    DDRB |= (1 << PB1 );
  38:	b9 9a       	sbi	0x17, 1	; 23
    // COM1A1 -> Compare Output Mode Channel A
    // COM1A0 -> Clear OC1A on Compare Match
    // PWM, Phase Correct 8-bit
    TCCR1A = (1<<COM1A1) | (1<<WGM10);
  3a:	81 e8       	ldi	r24, 0x81	; 129
  3c:	8f bd       	out	0x2f, r24	; 47
    // Kein Prescaling
    TCCR1B = (1 << CS10);
  3e:	81 e0       	ldi	r24, 0x01	; 1
  40:	8e bd       	out	0x2e, r24	; 46
    OCR1A = 0;
  42:	1b bc       	out	0x2b, r1	; 43
  44:	1a bc       	out	0x2a, r1	; 42
  46:	08 95       	ret

00000048 <Set7Segment>:
}

void Set7Segment(char value)
{
    if(value >9 || value < 0)
  48:	8a 30       	cpi	r24, 0x0A	; 10
  4a:	08 f0       	brcs	.+2      	; 0x4e <Set7Segment+0x6>
    {
	PORTC = 0x0f;
  4c:	8f e0       	ldi	r24, 0x0F	; 15
	return;
    }
    PORTC = value;
  4e:	85 bb       	out	0x15, r24	; 21
  50:	08 95       	ret

00000052 <main>:
void Set7Segment(char value);

int main(void)
{ 
    unsigned char zahl = 0;
    DDRB = 0x03;	// PIN0 und 1 auf Ausgang schalten
  52:	83 e0       	ldi	r24, 0x03	; 3
  54:	87 bb       	out	0x17, r24	; 23
    PORTB = 0x00;
  56:	18 ba       	out	0x18, r1	; 24
    
    DDRC = 0x0f;
  58:	8f e0       	ldi	r24, 0x0F	; 15
  5a:	84 bb       	out	0x14, r24	; 20
    PORTC = 0;
  5c:	15 ba       	out	0x15, r1	; 21

    InitPWMChannels();
  5e:	ec df       	rcall	.-40     	; 0x38 <InitPWMChannels>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  60:	2f ef       	ldi	r18, 0xFF	; 255
  62:	8d e3       	ldi	r24, 0x3D	; 61
  64:	99 e4       	ldi	r25, 0x49	; 73
  66:	21 50       	subi	r18, 0x01	; 1
  68:	80 40       	sbci	r24, 0x00	; 0
  6a:	90 40       	sbci	r25, 0x00	; 0
  6c:	e1 f7       	brne	.-8      	; 0x66 <main+0x14>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <main+0x1e>
  70:	00 00       	nop
    
    
    _delay_ms(2000);
    PORTB |= 0x01;	// Motor An
  72:	c0 9a       	sbi	0x18, 0	; 24
    
    unsigned char speed = 127;
    OCR1A = speed;
  74:	8f e7       	ldi	r24, 0x7F	; 127
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	9b bd       	out	0x2b, r25	; 43
  7a:	8a bd       	out	0x2a, r24	; 42
    if(value >9 || value < 0)
    {
	PORTC = 0x0f;
	return;
    }
    PORTC = value;
  7c:	15 ba       	out	0x15, r1	; 21
void InitPWMChannels();
void Set7Segment(char value);

int main(void)
{ 
    unsigned char zahl = 0;
  7e:	c0 e0       	ldi	r28, 0x00	; 0
  80:	2f e7       	ldi	r18, 0x7F	; 127
  82:	89 ea       	ldi	r24, 0xA9	; 169
  84:	93 e0       	ldi	r25, 0x03	; 3
  86:	21 50       	subi	r18, 0x01	; 1
  88:	80 40       	sbci	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <main+0x34>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <main+0x3e>
  90:	00 00       	nop
    Set7Segment(0);
    
    while( 1 )
    {   
	_delay_ms(100);
	zahl++;
  92:	cf 5f       	subi	r28, 0xFF	; 255
	if(zahl ==10) zahl = 0;
  94:	ca 30       	cpi	r28, 0x0A	; 10
  96:	09 f4       	brne	.+2      	; 0x9a <main+0x48>
  98:	c0 e0       	ldi	r28, 0x00	; 0
	Set7Segment(zahl);
  9a:	8c 2f       	mov	r24, r28
  9c:	d5 df       	rcall	.-86     	; 0x48 <Set7Segment>
    }  
  9e:	f0 cf       	rjmp	.-32     	; 0x80 <main+0x2e>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>
