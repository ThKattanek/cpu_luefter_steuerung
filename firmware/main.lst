   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	InitPWMChannels
  12               	InitPWMChannels:
  13               	.LFB8:
  14               		.file 1 "main.c"
   1:main.c        **** /* Name: main.c
   2:main.c        ****  * Projekt: cpu_lueftersteuerung
   3:main.c        ****  * Author: Thorsten Kattanek
   4:main.c        ****  * Erstellt am: 09.06.2016
   5:main.c        ****  * Copyright: Thorsten Kattanek
   6:main.c        ****  * License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)
   7:main.c        ****  *
   8:main.c        ****  */
   9:main.c        **** 
  10:main.c        **** #define F_CPU   12000000UL
  11:main.c        **** 
  12:main.c        **** #include <avr/io.h>
  13:main.c        **** #include <avr/wdt.h>
  14:main.c        **** #include <avr/interrupt.h>
  15:main.c        **** #include <util/delay.h>
  16:main.c        **** #include <avr/pgmspace.h>   /* ben√∂tigt von usbdrv.h */
  17:main.c        **** 
  18:main.c        **** void InitPWMChannels();
  19:main.c        **** void MotorOn(void);
  20:main.c        **** void MotorOff(void);
  21:main.c        **** void SetMotorSpeed(unsigned char value);
  22:main.c        **** void Set7Segment(char value);
  23:main.c        **** 
  24:main.c        **** int main(void)
  25:main.c        **** {
  26:main.c        ****     unsigned char speed_tbl[6] = {0,50,100,150,200,255};
  27:main.c        ****     unsigned char current_speed = 0; 	// 0 = Ausgang
  28:main.c        ****     unsigned char key, old_key = 0;
  29:main.c        ****     
  30:main.c        ****     DDRB = (1 << PB0 );	// PIN0 von PB auf Ausgang schalten
  31:main.c        ****     
  32:main.c        ****     DDRC = 0x0f;	// PINC0-3 Steuerung Anzeige
  33:main.c        ****     PINC = 0;		// Keine internen Pullups setzen
  34:main.c        **** 
  35:main.c        ****     InitPWMChannels();
  36:main.c        ****     MotorOff();
  37:main.c        ****     SetMotorSpeed(0);
  38:main.c        ****     Set7Segment(0);
  39:main.c        ****     
  40:main.c        ****     while( 1 )
  41:main.c        ****     {
  42:main.c        **** 	key = (PINC >> 4) & 1;
  43:main.c        **** 	
  44:main.c        **** 	if(key != old_key)
  45:main.c        **** 	{
  46:main.c        **** 	    if(!key)
  47:main.c        **** 	    {
  48:main.c        **** 		current_speed++;
  49:main.c        **** 		if(current_speed == 6)
  50:main.c        **** 		    current_speed = 0;
  51:main.c        **** 		Set7Segment(current_speed);
  52:main.c        **** 		
  53:main.c        **** 		if(current_speed == 0)
  54:main.c        **** 		    MotorOff();
  55:main.c        **** 		else
  56:main.c        **** 		    MotorOn();
  57:main.c        **** 		
  58:main.c        **** 		SetMotorSpeed(speed_tbl[current_speed]);
  59:main.c        **** 	    }
  60:main.c        **** 	}
  61:main.c        **** 	
  62:main.c        **** 	old_key = key;
  63:main.c        ****     }  
  64:main.c        **** }
  65:main.c        **** 
  66:main.c        **** /* ------------------------------------------------------------------------- */
  67:main.c        **** void InitPWMChannels()
  68:main.c        **** {
  15               		.loc 1 68 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  69:main.c        ****     DDRB |= (1 << PB1 );
  21               		.loc 1 69 0
  22 0000 B99A      		sbi 0x17,1
  70:main.c        ****     // COM1A1 -> Compare Output Mode Channel A
  71:main.c        ****     // COM1A0 -> Clear OC1A on Compare Match
  72:main.c        ****     // PWM, Phase Correct 8-bit
  73:main.c        ****     TCCR1A = (1<<COM1A1) | (1<<WGM10);
  23               		.loc 1 73 0
  24 0002 81E8      		ldi r24,lo8(-127)
  25 0004 8FBD      		out 0x2f,r24
  74:main.c        ****     // Kein Prescaling
  75:main.c        ****     TCCR1B = (1 << CS10);
  26               		.loc 1 75 0
  27 0006 81E0      		ldi r24,lo8(1)
  28 0008 8EBD      		out 0x2e,r24
  76:main.c        ****     OCR1A = 0;
  29               		.loc 1 76 0
  30 000a 1BBC      		out 0x2a+1,__zero_reg__
  31 000c 1ABC      		out 0x2a,__zero_reg__
  32 000e 0895      		ret
  33               		.cfi_endproc
  34               	.LFE8:
  36               	.global	Set7Segment
  38               	Set7Segment:
  39               	.LFB9:
  77:main.c        **** }
  78:main.c        **** 
  79:main.c        **** void Set7Segment(char value)
  80:main.c        **** {
  40               		.loc 1 80 0
  41               		.cfi_startproc
  42               	.LVL0:
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 0 */
  46               	.L__stack_usage = 0
  81:main.c        ****     if(value >9 || value < 0)
  47               		.loc 1 81 0
  48 0010 8A30      		cpi r24,lo8(10)
  49 0012 00F0      		brlo .L3
  82:main.c        ****     {
  83:main.c        **** 	PORTC = 0x0f;
  50               		.loc 1 83 0
  51 0014 8FE0      		ldi r24,lo8(15)
  52               	.LVL1:
  53               	.L3:
  84:main.c        **** 	return;
  85:main.c        ****     }
  86:main.c        ****     PORTC = value;
  54               		.loc 1 86 0
  55 0016 85BB      		out 0x15,r24
  56 0018 0895      		ret
  57               		.cfi_endproc
  58               	.LFE9:
  60               	.global	MotorOn
  62               	MotorOn:
  63               	.LFB10:
  87:main.c        **** }
  88:main.c        **** 
  89:main.c        **** void MotorOn(void)
  90:main.c        **** {
  64               		.loc 1 90 0
  65               		.cfi_startproc
  66               	/* prologue: function */
  67               	/* frame size = 0 */
  68               	/* stack size = 0 */
  69               	.L__stack_usage = 0
  91:main.c        ****     PORTB |= 1 << PB0;
  70               		.loc 1 91 0
  71 001a C09A      		sbi 0x18,0
  72 001c 0895      		ret
  73               		.cfi_endproc
  74               	.LFE10:
  76               	.global	MotorOff
  78               	MotorOff:
  79               	.LFB11:
  92:main.c        **** }
  93:main.c        **** 
  94:main.c        **** void MotorOff(void)
  95:main.c        **** {
  80               		.loc 1 95 0
  81               		.cfi_startproc
  82               	/* prologue: function */
  83               	/* frame size = 0 */
  84               	/* stack size = 0 */
  85               	.L__stack_usage = 0
  96:main.c        ****     PORTB &= ~(1 << PB0);
  86               		.loc 1 96 0
  87 001e C098      		cbi 0x18,0
  88 0020 0895      		ret
  89               		.cfi_endproc
  90               	.LFE11:
  92               		.section	.rodata
  93               	.LC0:
  94 0000 00        		.byte	0
  95 0001 32        		.byte	50
  96 0002 64        		.byte	100
  97 0003 96        		.byte	-106
  98 0004 C8        		.byte	-56
  99 0005 FF        		.byte	-1
 100               		.section	.text.startup,"ax",@progbits
 101               	.global	main
 103               	main:
 104               	.LFB7:
  25:main.c        ****     unsigned char speed_tbl[6] = {0,50,100,150,200,255};
 105               		.loc 1 25 0
 106               		.cfi_startproc
 107 0000 CF93      		push r28
 108               	.LCFI0:
 109               		.cfi_def_cfa_offset 3
 110               		.cfi_offset 28, -2
 111 0002 DF93      		push r29
 112               	.LCFI1:
 113               		.cfi_def_cfa_offset 4
 114               		.cfi_offset 29, -3
 115 0004 00D0      		rcall .
 116 0006 00D0      		rcall .
 117 0008 00D0      		rcall .
 118               	.LCFI2:
 119               		.cfi_def_cfa_offset 10
 120 000a CDB7      		in r28,__SP_L__
 121 000c DEB7      		in r29,__SP_H__
 122               	.LCFI3:
 123               		.cfi_def_cfa_register 28
 124               	/* prologue: function */
 125               	/* frame size = 6 */
 126               	/* stack size = 8 */
 127               	.L__stack_usage = 8
  26:main.c        ****     unsigned char current_speed = 0; 	// 0 = Ausgang
 128               		.loc 1 26 0
 129 000e 86E0      		ldi r24,lo8(6)
 130 0010 E0E0      		ldi r30,lo8(.LC0)
 131 0012 F0E0      		ldi r31,hi8(.LC0)
 132 0014 DE01      		movw r26,r28
 133 0016 1196      		adiw r26,1
 134               		0:
 135 0018 0190      		ld r0,Z+
 136 001a 0D92      		st X+,r0
 137 001c 8A95      		dec r24
 138 001e 01F4      		brne 0b
 139               	.LVL2:
  30:main.c        ****     
 140               		.loc 1 30 0
 141 0020 81E0      		ldi r24,lo8(1)
 142 0022 87BB      		out 0x17,r24
  32:main.c        ****     PINC = 0;		// Keine internen Pullups setzen
 143               		.loc 1 32 0
 144 0024 8FE0      		ldi r24,lo8(15)
 145 0026 84BB      		out 0x14,r24
  33:main.c        **** 
 146               		.loc 1 33 0
 147 0028 13BA      		out 0x13,__zero_reg__
  35:main.c        ****     MotorOff();
 148               		.loc 1 35 0
 149 002a 00D0      		rcall InitPWMChannels
 150               	.LVL3:
  36:main.c        ****     SetMotorSpeed(0);
 151               		.loc 1 36 0
 152 002c 00D0      		rcall MotorOff
 153               	.LVL4:
 154               	.LBB12:
 155               	.LBB13:
  97:main.c        **** }
  98:main.c        **** 
  99:main.c        **** void SetMotorSpeed(unsigned char value)
 100:main.c        **** {
 101:main.c        ****     OCR1A = value;
 156               		.loc 1 101 0
 157 002e 1BBC      		out 0x2a+1,__zero_reg__
 158 0030 1ABC      		out 0x2a,__zero_reg__
 159               	.LVL5:
 160               	.LBE13:
 161               	.LBE12:
 162               	.LBB14:
 163               	.LBB15:
  86:main.c        **** }
 164               		.loc 1 86 0
 165 0032 15BA      		out 0x15,__zero_reg__
 166               	.LBE15:
 167               	.LBE14:
  28:main.c        ****     
 168               		.loc 1 28 0
 169 0034 80E0      		ldi r24,0
  27:main.c        ****     unsigned char key, old_key = 0;
 170               		.loc 1 27 0
 171 0036 10E0      		ldi r17,0
 172               	.LVL6:
 173               	.L9:
  42:main.c        **** 	
 174               		.loc 1 42 0
 175 0038 03B3      		in r16,0x13
 176 003a 0295      		swap r16
 177 003c 0170      		andi r16,1
 178               	.LVL7:
  44:main.c        **** 	{
 179               		.loc 1 44 0
 180 003e 0813      		cpse r16,r24
 181 0040 00C0      		rjmp .L15
 182               	.LVL8:
 183               	.L10:
  25:main.c        ****     unsigned char speed_tbl[6] = {0,50,100,150,200,255};
 184               		.loc 1 25 0
 185 0042 802F      		mov r24,r16
 186 0044 00C0      		rjmp .L9
 187               	.LVL9:
 188               	.L15:
  46:main.c        **** 	    {
 189               		.loc 1 46 0
 190 0046 0111      		cpse r16,__zero_reg__
 191 0048 00C0      		rjmp .L10
  48:main.c        **** 		if(current_speed == 6)
 192               		.loc 1 48 0
 193 004a 1F5F      		subi r17,lo8(-(1))
 194               	.LVL10:
  49:main.c        **** 		    current_speed = 0;
 195               		.loc 1 49 0
 196 004c 1630      		cpi r17,lo8(6)
 197 004e 01F4      		brne .L11
  50:main.c        **** 		Set7Segment(current_speed);
 198               		.loc 1 50 0
 199 0050 10E0      		ldi r17,0
 200               	.LVL11:
 201               	.L11:
  51:main.c        **** 		
 202               		.loc 1 51 0
 203 0052 812F      		mov r24,r17
 204               	.LVL12:
 205 0054 00D0      		rcall Set7Segment
 206               	.LVL13:
  53:main.c        **** 		    MotorOff();
 207               		.loc 1 53 0
 208 0056 1111      		cpse r17,__zero_reg__
 209 0058 00C0      		rjmp .L12
 210               	.LVL14:
  54:main.c        **** 		else
 211               		.loc 1 54 0
 212 005a 00D0      		rcall MotorOff
 213               	.LVL15:
 214 005c 00C0      		rjmp .L13
 215               	.LVL16:
 216               	.L12:
  56:main.c        **** 		
 217               		.loc 1 56 0
 218 005e 00D0      		rcall MotorOn
 219               	.LVL17:
 220               	.L13:
  58:main.c        **** 	    }
 221               		.loc 1 58 0
 222 0060 E1E0      		ldi r30,lo8(1)
 223 0062 F0E0      		ldi r31,0
 224 0064 EC0F      		add r30,r28
 225 0066 FD1F      		adc r31,r29
 226 0068 E10F      		add r30,r17
 227 006a F11D      		adc r31,__zero_reg__
 228               	.LBB16:
 229               	.LBB17:
 230               		.loc 1 101 0
 231 006c 2081      		ld r18,Z
 232 006e 30E0      		ldi r19,0
 233 0070 3BBD      		out 0x2a+1,r19
 234 0072 2ABD      		out 0x2a,r18
 235 0074 00C0      		rjmp .L10
 236               	.LBE17:
 237               	.LBE16:
 238               		.cfi_endproc
 239               	.LFE7:
 241               		.text
 242               	.global	SetMotorSpeed
 244               	SetMotorSpeed:
 245               	.LFB12:
 100:main.c        ****     OCR1A = value;
 246               		.loc 1 100 0
 247               		.cfi_startproc
 248               	.LVL18:
 249               	/* prologue: function */
 250               	/* frame size = 0 */
 251               	/* stack size = 0 */
 252               	.L__stack_usage = 0
 253               		.loc 1 101 0
 254 0022 90E0      		ldi r25,0
 255 0024 9BBD      		out 0x2a+1,r25
 256 0026 8ABD      		out 0x2a,r24
 257 0028 0895      		ret
 258               		.cfi_endproc
 259               	.LFE12:
 261               	.Letext0:
 262               		.file 2 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc4NM7jS.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc4NM7jS.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc4NM7jS.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc4NM7jS.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc4NM7jS.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc4NM7jS.s:12     .text:0000000000000000 InitPWMChannels
     /tmp/cc4NM7jS.s:38     .text:0000000000000010 Set7Segment
     /tmp/cc4NM7jS.s:62     .text:000000000000001a MotorOn
     /tmp/cc4NM7jS.s:78     .text:000000000000001e MotorOff
     /tmp/cc4NM7jS.s:103    .text.startup:0000000000000000 main
     /tmp/cc4NM7jS.s:244    .text:0000000000000022 SetMotorSpeed

UNDEFINED SYMBOLS
__do_copy_data
